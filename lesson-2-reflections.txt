What happens when you initialize a repository? Why do you need to do it?

Once we initialiase a repository using git init we will be able to commit our changes. 
All commit will be saved as a snapshot in the history. We can see it using git log.
We can checkout any previous commitid using git checkout.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is a nice way to add things from a working directory that go together.
So we can work on a html file add it and make changes in the css then add it.
Finally we can commit it. There may be other files in the repository which we dont need to track.

How can you use the staging area to make sure you have one commit per logical
change?
We can add the changed files to staging area. Later after some time
we can compare it with working directory or with any commit id to know the 
differnce and should it be commited right away or more changes needs to be done.
We can eve reset using git reset --hard.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches help mainly when we are working on two things simultaneously. 
Like fixing a bug or changing the design layout and other branch with a new feature.
Both can be a seperate branch from master which we can later merge. It would be easier to
keep the master one as production. We can try out new things in a branch.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
